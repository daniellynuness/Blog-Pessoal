package org.generation.blogPessoal.controller;

import java.util.List;

import javax.validation.Valid;

import org.generation.blogPessoal.model.Postagem;
import org.generation.blogPessoal.repository.PostagemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
/*INDICA QUE A CLASSE √â UMA RESTCONTROLLER, OU SEJA, √â RESPONS√ÅVEL POR RESPONDER TODAS AS REQUISI√á√ïES HTTP ENVIADAS PARA UM ENDPOINT 
 (ENDERE√áO) DEFINIDO NA ANOTA√á√ÉO @REQUESTMAPPING*/

@RequestMapping("/postagens")
//INDICA O ENDPOINT (ENDERE√áO) QUE A CONTROLADORA RESPONDER√Å AS REQUISI√á√ïES

@CrossOrigin("*")
/*INDICA QUE A CLASSE CONTROLADORA PERMITIR√Å O RECEBIMENTO DE REQUISI√á√ïES REALIZADAS DE FORA DO DOM√çNIO (LOCALHOST, EM NOSSO CASO) AO QUAL 
ELA PERTENCE. ESSA ANOTA√á√ÉO √â ESSENCIAL PARA QUE O FRONT-END (ANGULAR OU REACT), TENHA ACESSO √Ä NOSSA API (O TERMO T√âCNICO √â CONSUMIR A API)
EM PRODU√á√ÉO, O * √â SUBSTITUIDO PELO ENDERE√áO DE DOM√çNIO (EXEMPLO: WWW.MEUDOMINIO.COM) DO FRONTEND*/

public class PostagemController {
	
	@Autowired
	private PostagemRepository repository;
	
	//INDICA QUE O M√âTODO ABAIXO RESPONDER√Å TODAS AS REQUISI√á√ïES DO TIPO GET QUE FOREM ENVIADAS NO ENDPOINT /POSTAGENS
	@GetMapping
	public ResponseEntity<List<Postagem>> GetAll() {
		//O M√âTODO GETALL() SER√Å DO TIPO RESPONSEENTITY PORQUE ELE RESPONDER√Å A REQUISI√á√ÉO (REQUEST), COM UMA HTTP RESPONSE (RESPOSTA HTTP).
		/*<LIST<POSTAGEM>>: O M√âTODO AL√âM DE RETORNAR UM OBJETO DA CLASSE RESPONSEENTITY (OK ü°™ 200), NO PAR√ÇMETRO BODY (CORPO DA RESPOSTA), 
		SER√Å RETORNADO UM OBJETO DA CLASSE LIST (COLLECTION), CONTENDO TODOS OS OBJETOS DA CLASSE POSTAGEM PERSISTIDOS NO BANCO DE DADOS, NA TABELA 
		 TB_POSTAGENS.*/
		return ResponseEntity.ok(repository.findAll());
		/*EXECUTA O M√âTODO FindAll() (M√âTODO PADR√ÉO DA INTERFACE JPAREPOSITORY), QUE RETORNAR√Å TODOS OS OBJETOS DA CLASSE POSTAGEM PERSISTIDOS NO 
		 * BANCO DE DADOS (<LIST<POSTAGEM>>). COMO A LIST SEMPRE SER√Å GERADA (VAZIA OU N√ÉO), O M√âTODO SEMPRE RETORNAR√Å O STATUS 200 ü°™ OK.
 		O M√âTODO FindAll() √â EQUIVALENTE A CONSULTA SQL: SELECT * FROM TB_POSTAGENS;*/
	}
	
	/*INDICA QUE O M√âTODO ABAIXO RESPONDER√Å TODAS AS REQUISI√á√ïES DO TIPO GET QUE FOREM ENVIADAS NO ENDPOINT /POSTAGENS/ID, ONDE ID √â UMA VARI√ÅVEL
	 DE CAMINHO (PATH VARIABLE), QUE RECEBER√Å EM NOSSO O EXEMPLO O ID QUE VOC√ä DESEJA ENCONTRAR*/
	@GetMapping("/{id}")
	public ResponseEntity<Postagem> getById(@PathVariable Long id) {
		/*@PATHVARIABLE LONG ID: ANOTA√á√ÉO QUE INSERE A VARI√ÅVEL DE CAMINHO (PATH VARIABLE) ID, QUE FOI INFORMADA NO ENDERE√áO DA REQUISI√á√ÉO, 
		 E INSERE NO PAR√ÇMETRO ID DO M√âTODO GETBYID.*/
		return repository.findById(id).map(resposta -> ResponseEntity.ok(resposta)).orElse(ResponseEntity.notFound().build());
		/*.MAP(RESPOSTA -> RESPONSEENTITY.OK(RESPOSTA)): SE A POSTAGEM EXISTIR, A FUN√á√ÉO MAP (TIPO OPTIONAL), APLICA O VALOR DO OBJETO RESPOSTA 
		 (OBJETO DO TIPO POSTAGEM COM O RETORNO DO M√âTODO FINDBYID(ID) NO M√âTODO: RESPONSEENTITY.OK(RESPOSTA); E RETORNA O STATUS OK => 200*/
	}
	
	
	@GetMapping("/titulo/{titulo}")
	public ResponseEntity<List<Postagem>> getByTitulo(@PathVariable String titulo){
		return ResponseEntity.ok(repository.findAllByTituloContainingIgnoreCase(titulo));
	}

	
	//ANOTA√á√ÉO QUE INDICA QUE O M√âTODO ABAIXO RESPONDER√Å TODAS AS REQUISI√á√ïES DO TIPO POST QUE FOREM ENVIADAS NO ENDPOINT /POSTAGENS
	@PostMapping
	public ResponseEntity<Postagem> postPostagem (@Valid @RequestBody Postagem postagem){
		/*@VALID: VALIDA O OBJETO POSTAGEM ENVIADO NO CORPO DA REQUISI√á√ÉO (REQUEST BODY), CONFORME AS REGRAS DEFINIDAS NA MODEL POSTAGEM. 
		 CASO ALGUM ATRIBUTO N√ÉO SEJA VALIDADO, O M√âTODO RETORNAR√Å UM STATUS 400 => BAD REQUEST.*/
		return ResponseEntity.status(HttpStatus.CREATED).body(repository.save(postagem));
		//EXECUTA O M√âTODO SAVE(POSTAGEM) E RETORNA O STATUS CREATED = 201 SE O OBJETO POSTAGEM FOI INSERIDO NA TABELA POSTAGENS NO BANCO DE DADOS.
	}
	
	//ANOTA√á√ÉO QUE INDICA QUE O M√âTODO ABAIXO RESPONDER√Å TODAS AS REQUISI√á√ïES DO TIPO PUT QUE FOREM ENVIADAS NO ENDPOINT /POSTAGENS
	@PutMapping
	public ResponseEntity<Postagem> putPostagem (@RequestBody Postagem postagem) {
		return ResponseEntity.status(HttpStatus.OK).body(repository.save(postagem));
		//EXECUTA O M√âTODO SAVE(POSTAGEM) E RETORNA O STATUS OK = 200 SE O OBJETO POSTAGEM FOI ATUALIZADO NA TABELA POSTAGENS NO BANCO DE DADOS.
	}
	
	//INDICA QUE O M√âTODO ABAIXO RESPONDER√Å TODAS AS REQUISI√á√ïES DO TIPO DELETE QUE FOREM ENVIADAS NO ENDPOINT /POSTAGENS/ID
	@DeleteMapping("/{id}")
	public void deletePostagem (@PathVariable Long id) {
		repository.deleteById(id);
	}
}